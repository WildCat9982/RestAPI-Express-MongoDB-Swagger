openapi: 3.0.0
info:
  title: Node.js + MongoDB API - JWT Authentication with Refresh Tokens
  version: 1.0.0

servers:
  - url: http://localhost:3000
    description: Local development server

paths:
  /users:
    get:
      summary: get all users from db
      description: read all users from db
      operationId: getAllUsers
      security:
        - bearerAuth: []
      responses:
        "200":
          description: users list
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                      example: "614a2474eb7c875f56ac4e91"
                    username:
                      type: string
                      example: "KelvinLee"
                    passwordHash:
                      type: string
                      example: "$2b$10$xvPmaAwTXzgVr0jv3O/9xOEJH8X0VJ1ryM6V6IJkfUCjdi/t6rpg2"
                    role:
                      type: string
                      example: "Admin"
                    createAt:
                      type: date
                      example: "2021-09-21T18:29:08.292+00:00"
        "500":
          description: server internal error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "server internal error"

    post:
      summary: Create a new user
      operationId: createNewUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "KelvinLee"
                passwordHash:
                  type: string
                  example: "$2b$10$xvPmaAwTXzgVr0jv3O/9xOEJH8X0VJ1ryM6V6IJkfUCjdi/t6rpg2"
                role:
                  type: string
                  example: "admin"
              required:
                - username
                - password
                - role
      responses:
        "200":
          description: user has been created successfully
          content:
            application/json:
              schema:
                  type: object
                  properties:
                    _id:
                      type: string
                      example: "614a2474eb7c875f56ac4e91"
                    username:
                      type: string
                      example: "KelvinLee"
                    passwordHash:
                      type: string
                      example: "$2b$10$xvPmaAwTXzgVr0jv3O/9xOEJH8X0VJ1ryM6V6IJkfUCjdi/t6rpg2"
                    role:
                      type: string
                      example: "Admin"
                    createAt:
                      type: date
                      example: "2021-09-21T18:29:08.292+00:00"
        "500":
          description: server internal error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "server internal error"

  /users/{id}:
    parameters:
      - in: path
        name: id
        description: User id
        required: true
        example: "614a2474eb7c875f56ac4e91"
        schema:
          type: string
    get:
      summary: Get a single user by id
      description: Admin users can access any user record, regular users are restricted to their own user record.
      operationId: getUserById
      security:
        - bearerAuth: []
      responses:
        "200":
          description: users list
          content:
            application/json:
              schema:
                  type: object
                  properties:
                    _id:
                      type: string
                      example: "614a2474eb7c875f56ac4e91"
                    username:
                      type: string
                      example: "KelvinLee"
                    passwordHash:
                      type: string
                      example: "$2b$10$xvPmaAwTXzgVr0jv3O/9xOEJH8X0VJ1ryM6V6IJkfUCjdi/t6rpg2"
                    role:
                      type: string
                      example: "Admin"
                    createAt:
                      type: date
                      example: "2021-09-21T18:29:08.292+00:00"
        "500":
          description: server internal error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "server internal error"

    put:
      summary: Update a user by id
      operationId: updateUserById
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "KelvinLee"
                passwordHash:
                  type: string
                  example: "$2b$10$xvPmaAwTXzgVr0jv3O/9xOEJH8X0VJ1ryM6V6IJkfUCjdi/t6rpg2"
                role:
                  type: string
                  example: "admin"
              required:
                - username
                - password
                - role
      responses:
        "200":
          description: user has been updated successfully
          content:
            application/json:
              schema:
                token:
                  type: object
                properties:
                  _id:
                    type: string
                    example: "614a2474eb7c875f56ac4e91"
                  username:
                    type: string
                    example: "KelvinLee"
                  passwordHash:
                    type: string
                    example: "$2b$10$xvPmaAwTXzgVr0jv3O/9xOEJH8X0VJ1ryM6V6IJkfUCjdi/t6rpg2"
                  role:
                    type: string
                    example: "Admin"
                  createAt:
                    type: date
                    example: "2021-09-21T18:29:08.292+00:00"
        "500":
          description: server internal error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "server internal error"

    delete:
      summary: delete a single user by id
      description: delete a single user by id
      operationId: deleteUserById
      security:
        - bearerAuth: []
      responses:
        "200":
          description: delete user successfully
          content:
            application/json:
              schema:
                  type: object
                  properties:
                    success:
                      type: boolean
                      example: true
                    message:
                      type: string
                      example: "Record has been removed successfully."
        "500":
          description: server internal error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "server internal error"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid, or the user does not have access to perform the action
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Unauthorized"
    NotFoundError:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Not Found"